{"users":[{"name":"Nick","email":"user1@gmail.com","password":"123456","id":1},{"name":"Mike","email":"user2@gmail.com","password":"123456","id":2},{"name":"Ben","email":"user3@gmail.com","password":"123456","id":4}],"blogs":[{"title":"The Zen of Python: A guide to Python’s design principles","article":"A Pythoneer once wrote 20 aphorisms stating how one can write beautiful and clean code with Python. Came to be known as “The Zen of Python”, these aphorisms exploded amongst Python developers. Tim Peters wrote these BDFL’s (Benevolent Dictator For Life, a nickname of Python creator Guido van Rossum) 20 guiding principles for Python’s design but the last aphorism was left for van Rossum to fill in.\r\nTill today, there are 19 aphorisms as Rossum said that the last aphorism is “some bizarre Tim Peters in-joke.” But, what do these aphorisms mean?. Let’s crack it up!\r\nThe Zen of Python\r\nBeautiful is better than ugly.\r\nExplicit is better than implicit.\r\nSimple is better than complex.\r\nComplex is better than complicated.\r\nFlat is better than nested.\r\nSparse is better than dense.\r\nReadability counts.\r\nSpecial cases aren't special enough to break the rules.\r\nAlthough practicality beats purity.\r\nErrors should never pass silently.\r\nUnless explicitly silenced.\r\nIn the face of ambiguity, refuse the temptation to guess.\r\nThere should be one-- and preferably only one --obvious way to do it.\r\nAlthough that way may not be obvious at first unless you're Dutch.\r\nNow is better than never.\r\nAlthough never is often better than *right* now.\r\nIf the implementation is hard to explain, it's a bad idea.\r\nIf the implementation is easy to explain, it may be a good idea.\r\nNamespaces are one honking great idea -- let's do more of those!\r\nYou can open “Easter Egg” in your Python IDE by typing:\r\nimport this\r\nBeautiful is better than ugly\r\nBeing a developer, writing code and making it run is not the only job to do. Python is known for its readability and simplicity. So, why tamper it? Writing clean and readable code is an art which is appreciated by other programmers and let them understand every bit.","date":1718746182467,"image":"17187461422051*m0H6-tUbW6grMlezlb52yw.png"},{"title":"What to Expect from Realm JavaScript v12","article":"The Realm JavaScript team has been working on Realm JavaScript version 12 for a while. We have released a number of prereleases to gain confidence in our approach, and we will continue to do so as we uncover and fix issues. We cannot give a date for when we will have the final release, but we would like to give you a brief introduction to what to expect.\r\nChanges to the existing API\r\nYou will continue to see version 11 releases as bugs are fixed in Realm Core — our underlying database. All of our effort is now focused on version 12, so we don’t expect to fix any more SDK bugs on version 11, and all new bug reports will be verified against version 12. Moreover, we do not plan any new functionality on version 11.\r\nYou might expect many breaking changes as we are bumping the major version, but we are actually planning to have as few breaking changes as possible. The reason is that the next major version is more breaking for us than you. In reality, it is a complete rewrite of the SDK internals.\r\nWe are changing our collection classes a bit. Today, they derive from a common Collection class that is modeled over ReadonlyArray. It is problematic for Realm.Dictionary as there is no natural ordering. Furthermore, we are deprecating our namespaced API since we find it out of touch with modern TypeScript and JavaScript development. We are dropping support for Altas push notifications (they have been\r\ndeprecated some time ago\r\n). Other changes might come along during the development process and we will document them carefully.\r\nThe goal of the rewrite is to keep the public API as it is, and change the internal implementation. To ensure that we are keeping the API mostly untouched, we are either reusing or rewriting the tests we have written over the years. We implemented the ported tests in JavaScript and rewrote them in TypeScript to help us verify the new TypeScript types.\r\nIssues with the old architecture\r\nRealm JavaScript has historically been a mixture of C++ and vanilla JavaScript. TypeScript definitions and API documentation have been added on the side. A good portion of the API does not touch a single line of JavaScript code but goes directly to an implementation in C++. This makes it difficult to quickly add new functionality, as you have to decide if it can be implemented in JavaScript, C++, or a mixture of both. Moreover, you need to remember to update TypeScript definitions and API documentation. Consequently, over the years, we have seen issues where either API documentation or TypeScript definitions are not consistent with the implementation.","date":1718747986757,"image":"17187479823701*LyZcwuLWv2FArOumCxobpA.png"},{"title":"What to Expect from Realm JavaScript v12","article":"The Realm JavaScript team has been working on Realm JavaScript version 12 for a while. We have released a number of prereleases to gain confidence in our approach, and we will continue to do so as we uncover and fix issues. We cannot give a date for when we will have the final release, but we would like to give you a brief introduction to what to expect.\r\nChanges to the existing API\r\nYou will continue to see version 11 releases as bugs are fixed in Realm Core — our underlying database. All of our effort is now focused on version 12, so we don’t expect to fix any more SDK bugs on version 11, and all new bug reports will be verified against version 12. Moreover, we do not plan any new functionality on version 11.\r\nYou might expect many breaking changes as we are bumping the major version, but we are actually planning to have as few breaking changes as possible. The reason is that the next major version is more breaking for us than you. In reality, it is a complete rewrite of the SDK internals.\r\nWe are changing our collection classes a bit. Today, they derive from a common Collection class that is modeled over ReadonlyArray. It is problematic for Realm.Dictionary as there is no natural ordering. Furthermore, we are deprecating our namespaced API since we find it out of touch with modern TypeScript and JavaScript development. We are dropping support for Altas push notifications (they have been\r\ndeprecated some time ago\r\n). Other changes might come along during the development process and we will document them carefully.\r\nThe goal of the rewrite is to keep the public API as it is, and change the internal implementation. To ensure that we are keeping the API mostly untouched, we are either reusing or rewriting the tests we have written over the years. We implemented the ported tests in JavaScript and rewrote them in TypeScript to help us verify the new TypeScript types.\r\nIssues with the old architecture\r\nRealm JavaScript has historically been a mixture of C++ and vanilla JavaScript. TypeScript definitions and API documentation have been added on the side. A good portion of the API does not touch a single line of JavaScript code but goes directly to an implementation in C++. This makes it difficult to quickly add new functionality, as you have to decide if it can be implemented in JavaScript, C++, or a mixture of both. Moreover, you need to remember to update TypeScript definitions and API documentation. Consequently, over the years, we have seen issues where either API documentation or TypeScript definitions are not consistent with the implementation.","date":1718747986757,"image":"17187479823701*LyZcwuLWv2FArOumCxobpA.png"},{"title":"Node.js allows developers to create both front-end and back-end applications using JavaScript. It was released in 2009 by Ryan Dahl.","article":"What is Node.js?\r\n\"Node.js is an open-source and cross-platform JavaScript runtime environment.\" - Nodejs.dev Docs\r\nThis sounds like a cool, straightforward answer. But for a beginner, this definition might raise further questions. So let's break it down and understand what it means.\r\n\r\nNode.js is open-source: This means that the source code for Node.js is publicly available. And it's maintained by contributors from all over the world. The Node.js contribution guide shows you how to contribute.\r\n\r\nNode.js is cross-platform: Node.js is not dependent on any operating system software. It can work on Linux, macOS, or Windows.\r\n\r\nNode.js is a JavaScript runtime environment: When you write JavaScript code in your text editor, that code cannot perform any task unless you execute (or run) it. And to run your code, you need a runtime environment.\r\n\r\nBrowsers like Chrome and Firefox have runtime environments. That is why they can run JavaScript code. Before Node.js was created, JavaScript could only run in a browser. And it was used to build only front-end applications.\r\n\r\nNode.js provides a runtime environment outside of the browser. It's also built on the Chrome V8 JavaScript engine. This makes it possible to build back-end applications using the same JavaScript programming language you may be familiar with.\r\n\r\nDifferences Between the Browser and Node.js Runtime Environments\r\nBoth the browser and Node.js are capable of executing JavaScript programs. But there are some key differences that you need to know. They include the following.\r\n\r\nAccess to the DOM APIs\r\nWith the browser runtime, you can access the Document Object Model (DOM). And you can perform all the DOM operations. But Node.js does not have access to the DOM.\r\n\r\nNode.js exposes almost all the system resources to your programs. This means you can interact with the operating system, access the file systems, and read and write to the files. But, you do not have access to operating systems and file systems from the browser.\r\n\r\nWindow vs Global object\r\nJavaScript has a built-in global object. The JavaScript global object for the browser is called the window object. In Node.js, the global object goes by the name global.\r\n\r\nThe window object contains methods and properties available only in the browser environment.","date":1718748082127,"image":"1718748076488What-is.png"}]}